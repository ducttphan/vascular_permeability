import pandas as pd 
import matplotlib.pyplot as plt 
import numpy as np
from pandas.core.reshape.concat import concat 
import streamlit as st 
import os

#ReadMe function 
def ReadMe() : 
    
    st.markdown("""**Instructions:**  
    1. Type name of condition to be analyzed. (e.g. _Control_ or _Bevacizumab-100ng/mL_)  
    2. This app will automatically display a table summary of raw permeability data and calculate __Mean/SD/SEM/N.__   
    4. Save your data tables to .csv files and export to your graphing app (e.g. Prism) or use Plot Data mode for quick data visualization.  
    5. Use your permeability_summary.csv output files (i.e. condition_permeability_summary.csv) in Plot Data mode.  """)

def TabulateData() : 

    st.header('Tabulate Data')
    st.write("""__Instructions:__   
    1. Type in name of your group. (__Note:__ Avoid using special characters when naming. For example, replace "_10,000 RFU/mL_" with "_10K RFU(mL-1)_")   
    2. Upload __ALL__ raw .csv files that belong to this group.   
    3. Type in directory path to save .csv files. (e.g. _/Users/a/Desktop/data/_).  
    """)

    filelist = []
    average_ROI = []
    name_input = st.text_input("Name of group:")
    uploaded_files = st.file_uploader("Select all .csv files belong to this group:", accept_multiple_files= True)

    uploaded_file_count = len(uploaded_files)

    for file in uploaded_files: 
        file_csv = pd.read_csv(file)
        filelist.append(file.name)
        average_ROI.append(file_csv.mean())
        df = pd.DataFrame(data= average_ROI, index= filelist)

    avg_leak = df['Vascular Leak'].mean() 
    std_leak = df['Vascular Leak'].std()
    sem_leak = df['Vascular Leak'].sem()
    num_row = len(df)
    summary = pd.Series(data=[avg_leak, std_leak, sem_leak, num_row], index= ['Avg. Vasc. Leak', 'SD', 'SEM', 'N'], name= name_input)

    st.write(df)
    st.write(summary)
    with st.form('save_raw pixel_files') :
                save_dir = st.text_input('Type directory to save dataframe and summary .csv files:')
                df_csv = os.path.join(save_dir, name_input + '_permeability_dataframe.csv')
                summary_csv = os.path.join(save_dir, name_input + '_permeability_summary.csv')
                saved = st.form_submit_button('Save')
                if saved:
                    df.to_csv(df_csv)
                    summary.to_csv(summary_csv)
                    st.write('_Files saved_')


#Run statistical analysis and plot data
def PlotData() :

    condition_key = 'condition_'
    file_key = 'file_key_'

    name_list = []
    data_list = []
    sd_list = []
    sem_err_list = []

    st.header('Plot Data')
    st.write("""__Instructions:__   
    1. Name your condition as how you want it to display on the plot (e.g. Drug "A" - 1 mg/mL).  
    2. Upload your __<condition>_permeability_summary.csv__ files from Tabulate Data mode.   
    3. Use sidebar options to customize your plot.  
    """)
    st.write('___  ')
    plot_title = st.sidebar.text_input('Type in plot title:')

    st.write("""## _Plot Setup_  """)

    n_condition = st.text_input('Number of condition(s) to plot:')
    for i in range(0, int(n_condition)) : 
        condition_name = st.text_input("Name of condition:", key= condition_key + str(i))
        condition_file = st.file_uploader('Select file to upload', key= file_key + str(i))
        condition_data = pd.read_csv(condition_file, header=0, index_col=0)

        avg_leak = condition_data.iloc[0]
        sd = condition_data.iloc[1]
        sem = condition_data.iloc[2]
        
        name_list.append(condition_name)
        data_list.append(avg_leak)
        sd_list.append(sd)
        sem_err_list.append(sem)
    
    st.write('___  ')
    st.write("""## _Auto-Generated Plot_  """)

    fig = plt.figure(figsize= [6.0, 4.0])
    for i in range(0, int(n_condition)) :
        plt.bar(x= name_list[i], height= data_list[i], yerr= sem_err_list[i], capsize= 2)
    
    #Select plot theme
    theme_options = ['default', 'seaborn', 'ggplot', 'seaborn-white', 'seaborn-deep', 'grayscale']
    theme_selection = st.sidebar.selectbox('Select plot theme:', theme_options, index= 0)
    plt.style.use(theme_selection)

    #Label plot
    plt.title(plot_title)
    plt.grid(color = 'black', linestyle = 'dotted', linewidth = 0.2)
    plt.xlabel('Condition')
    plt.ylabel('Vascular Leak (RFU)')

    st.write(fig)
    st.write('_Error bars = SEM_  ')


#Main function 

modeOptions = ['Read Me', 'Tabulate Data', 'Plot Data']

st.image(image='Linear_Logo.tif')
st.write('  ')
st.title('VASCULAR PERMEABILITY ANALYSIS')
st.write("This app will tabulate .csv files generated by ImageJ/FIJI Vascular Permeability plugin and perform analysis.  ")

st.header('Select Mode:')
mode = st.radio("", modeOptions, index=0)
tabMethods = [ReadMe, TabulateData, PlotData]
tabMethods[modeOptions.index(mode)]()    
